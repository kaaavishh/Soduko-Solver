#include <bits/stdc++.h>
using namespace std;

bool solveSudoku(vector<vector<char>> &sudoku);
bool isSafe(vector<vector<char>> &sudoku, int row, int col, char c);

int main() {

    vector<vector<char>> sudoku = {
        {'8', '.', '.', '.', '.', '.', '.', '.', '.'},
        {'.', '.', '3', '6', '.', '.', '.', '.', '.'},
        {'.', '7', '.', '.', '9', '.', '2', '.', '.'},
        {'.', '5', '.', '.', '.', '7', '.', '.', '.'},
        {'.', '.', '.', '.', '4', '5', '7', '.', '.'},
        {'.', '.', '.', '1', '.', '.', '.', '3', '.'},
        {'.', '.', '1', '.', '.', '.', '.', '6', '8'},
        {'.', '.', '8', '5', '.', '.', '.', '1', '.'},
        {'.', '9', '.', '.', '.', '.', '4', '.', '.'}
    };

    if (solveSudoku(sudoku)) {
        cout << "Sudoku puzzle solved successfully:\n";
        // Print the solved Sudoku puzzle
        for (auto &row : sudoku) {
            for (char cell : row) {
                cout << cell << " ";
            }
            cout << endl;
        }
    } else {
        cout << "No solution exists for the given Sudoku puzzle.\n";
    }
}

bool solveSudoku(vector<vector<char>> &sudoku) {
    for (int i = 0; i < sudoku.size(); i++) {
        for (int j = 0; j < sudoku[0].size(); j++) {
            if (sudoku[i][j] == '.') {
                for (char c = '1'; c <= '9'; c++) {
                    if (isSafe(sudoku, i, j, c)) {
                        sudoku[i][j] = c;
                        if (solveSudoku(sudoku)) {
                            return true;
                        } else {
                            sudoku[i][j] = '.'; // Backtrack
                        }
                    }
                }
                return false; // Unable to put any char at the current location
            }
        }
    }
    return true;
}

bool isSafe(vector<vector<char>> &sudoku, int row, int col, char c) {
    for (int i = 0; i < 9; i++) {
        if (sudoku[i][col] == c)
            return false;
        if (sudoku[row][i] == c)
            return false;
        if (sudoku[3 * (row / 3) + i / 3][3 * (col / 3) + i % 3] == c)
            return false;
    }
    return true;
}
